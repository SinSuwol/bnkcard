package com.busanbank.card.admin.dao;

import com.busanbank.card.admin.dto.CardOption;
import com.busanbank.card.admin.dto.DropMemberRow;
import com.busanbank.card.admin.dto.StepChurnRow;
import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.annotations.Select;

import java.util.Date;
import java.util.List;

@Mapper
public interface JourneyChurnMapper {

    // 카드 목록
    @Select({
        "<script>",
        "SELECT",
        "  c.CARD_NO   AS cardNo,",
        "  c.CARD_NAME AS cardName",
        "FROM CARD c",
        "ORDER BY c.CARD_NO",
        "</script>"
    })
    List<CardOption> selectCards(@Param("activeOnly") String activeOnly);

    // 요약
    @Select({
        "<script>",
        "WITH",
        "step_def (step_code, step_name, step_order) AS (",
        "  SELECT 'TERMS_AGREED','약관동의',10  FROM DUAL UNION ALL",
        "  SELECT 'INFO_INPUT','이름/영문/주민',20 FROM DUAL UNION ALL",
        "  SELECT 'CONTACT_INPUT','이메일/휴대전화',30 FROM DUAL UNION ALL",
        "  SELECT 'JOB_INPUT','직업/거래목적',40 FROM DUAL UNION ALL",
        "  SELECT 'PHOTO_UPLOADED','사진 업로드',50 FROM DUAL UNION ALL",
        "  SELECT 'ACCOUNT_CREATED','계좌 생성',60 FROM DUAL UNION ALL",
        "  SELECT 'ACCOUNT_PW_SET','계좌 비밀번호',70 FROM DUAL UNION ALL",
        "  SELECT 'CARD_OPTIONS_SET','카드 옵션 입력',80 FROM DUAL UNION ALL",
        "  SELECT 'ADDRESS_INPUT','배송지 입력',90 FROM DUAL UNION ALL",
        "  SELECT 'CARD_PW_SET','카드 비밀번호',100 FROM DUAL UNION ALL",
        "  SELECT 'ISSUED','발급 완료',110 FROM DUAL UNION ALL",
        "  SELECT 'CANCELLED','취소',999 FROM DUAL",
        "),",
        "step_gap (from_code, from_name, from_order, to_code, to_name, to_order) AS (",
        "  SELECT 'TERMS_AGREED','약관동의',10,'INFO_INPUT','이름/영문/주민',20 FROM DUAL UNION ALL",
        "  SELECT 'INFO_INPUT','이름/영문/주민',20,'CONTACT_INPUT','이메일/휴대전화',30 FROM DUAL UNION ALL",
        "  SELECT 'CONTACT_INPUT','이메일/휴대전화',30,'JOB_INPUT','직업/거래목적',40 FROM DUAL UNION ALL",
        "  SELECT 'JOB_INPUT','직업/거래목적',40,'PHOTO_UPLOADED','사진 업로드',50 FROM DUAL UNION ALL",
        "  SELECT 'PHOTO_UPLOADED','사진 업로드',50,'ACCOUNT_CREATED','계좌 생성',60 FROM DUAL UNION ALL",
        "  SELECT 'ACCOUNT_CREATED','계좌 생성',60,'ACCOUNT_PW_SET','계좌 비밀번호',70 FROM DUAL UNION ALL",
        "  SELECT 'ACCOUNT_PW_SET','계좌 비밀번호',70,'CARD_OPTIONS_SET','카드 옵션 입력',80 FROM DUAL UNION ALL",
        "  SELECT 'CARD_OPTIONS_SET','카드 옵션 입력',80,'ADDRESS_INPUT','배송지 입력',90 FROM DUAL UNION ALL",
        "  SELECT 'ADDRESS_INPUT','배송지 입력',90,'CARD_PW_SET','카드 비밀번호',100 FROM DUAL UNION ALL",
        "  SELECT 'CARD_PW_SET','카드 비밀번호',100,'ISSUED','발급 완료',110 FROM DUAL",
        "),",
        "last_step AS (",
        "  SELECT",
        "    t.APPLICATION_NO, t.MEMBER_NO, t.CARD_NO, c.CARD_NAME,",
        "    d.step_code, d.step_name, d.step_order",
        "  FROM CARD_APPLICATION_TEMP t",
        "  JOIN step_def d ON d.step_code = t.STATUS",
        "  JOIN CARD c ON c.CARD_NO = t.CARD_NO",
        "  WHERE 1=1",
        "    AND t.CARD_NO = #{cardNo}",
        "<if test='fromDate != null'>",
        "    AND t.CREATED_AT &gt;= TRUNC(#{fromDate})",
        "</if>",
        "<if test='toDate != null'>",
        "    AND t.CREATED_AT &lt; TRUNC(#{toDate}) + 1",
        "</if>",
        "<if test='isCredit != null and isCredit != \"\"'>",
        "    AND t.IS_CREDIT_CARD = #{isCredit}",
        "</if>",
        "),",
        "reached_from AS (",
        "  SELECT",
        "    l.CARD_NO, l.CARD_NAME,",
        "    g.from_code, g.from_name, g.from_order,",
        "    g.to_code,   g.to_name,   g.to_order,",
        "    COUNT(*) AS reached_cnt_from",
        "  FROM step_gap g",
        "  JOIN last_step l ON l.step_order &gt;= g.from_order",
        "  GROUP BY",
        "    l.CARD_NO, l.CARD_NAME,",
        "    g.from_code, g.from_name, g.from_order,",
        "    g.to_code,   g.to_name,   g.to_order",
        "),",
        "reached_to AS (",
        "  SELECT",
        "    l.CARD_NO, g.from_code, g.to_code,",
        "    COUNT(*) AS reached_cnt_to",
        "  FROM step_gap g",
        "  JOIN last_step l ON l.step_order &gt;= g.to_order",
        "  GROUP BY l.CARD_NO, g.from_code, g.to_code",
        "),",
        "stuck AS (",
        "  SELECT l.CARD_NO, l.step_code AS from_code, COUNT(*) AS stuck_cnt",
        "  FROM last_step l",
        "  GROUP BY l.CARD_NO, l.step_code",
        "),",
        "joined_rows AS (",
        "  SELECT",
        "    rf.CARD_NO, rf.CARD_NAME,",
        "    rf.from_code, rf.from_name, rf.from_order,",
        "    rf.to_code,   rf.to_name,   rf.to_order,",
        "    rf.reached_cnt_from,",
        "    NVL(rt.reached_cnt_to, 0)  AS reached_cnt_to,",
        "    NVL(s.stuck_cnt, 0)        AS stuck_cnt",
        "  FROM reached_from rf",
        "  LEFT JOIN reached_to rt",
        "    ON rt.CARD_NO   = rf.CARD_NO",
        "   AND rt.from_code = rf.from_code",
        "   AND rt.to_code   = rf.to_code",
        "  LEFT JOIN stuck s",
        "    ON s.CARD_NO    = rf.CARD_NO",
        "   AND s.from_code  = rf.from_code",
        ")",
        "SELECT *",
        "FROM (",
        "  SELECT",
        "    CARD_NO           AS cardNo,",
        "    CARD_NAME         AS cardName,",
        "    from_code         AS fromStepCode,",
        "    from_name         AS fromStepName,",
        "    to_code           AS toStepCode,",
        "    to_name           AS toStepName,",
        "    to_order          AS toStepOrder,",
        "    reached_cnt_from  AS reachedAtFrom,",
        "    reached_cnt_to    AS reachedAtTo,",
        "    stuck_cnt         AS droppedBetween,",
        "    CASE WHEN reached_cnt_from &gt; 0",
        "         THEN ROUND((100 * stuck_cnt) / reached_cnt_from, 1)",
        "    END               AS dropPct",
        "  FROM joined_rows",
        "  WHERE 1=1",
        "<if test='excludeTerminals == null or excludeTerminals == \"Y\"'>",
        "    AND to_code NOT IN ('ISSUED','CANCELLED')",
        "</if>",
        "  ORDER BY droppedBetween DESC, dropPct DESC, toStepOrder",
        ") v",
        "WHERE ROWNUM &lt;= #{limitPerCard}",
        "</script>"
    })
    List<StepChurnRow> selectCardStepChurnSummary(
            @Param("fromDate") Date fromDate,
            @Param("toDate") Date toDate,
            @Param("isCredit") String isCredit,
            @Param("cardNo") Long cardNo,
            @Param("excludeTerminals") String excludeTerminals,
            @Param("limitPerCard") Integer limitPerCard
    );

    // 상세
    @Select({
        "<script>",
        "<![CDATA[",
        "WITH step_def (step_code, step_name, step_order) AS (",
        "  SELECT 'TERMS_AGREED','약관동의',10  FROM DUAL UNION ALL",
        "  SELECT 'INFO_INPUT','이름/영문/주민',20 FROM DUAL UNION ALL",
        "  SELECT 'CONTACT_INPUT','이메일/휴대전화',30 FROM DUAL UNION ALL",
        "  SELECT 'JOB_INPUT','직업/거래목적',40 FROM DUAL UNION ALL",
        "  SELECT 'PHOTO_UPLOADED','사진 업로드',50 FROM DUAL UNION ALL",
        "  SELECT 'ACCOUNT_CREATED','계좌 생성',60 FROM DUAL UNION ALL",
        "  SELECT 'ACCOUNT_PW_SET','계좌 비밀번호',70 FROM DUAL UNION ALL",
        "  SELECT 'CARD_OPTIONS_SET','카드 옵션 입력',80 FROM DUAL UNION ALL",
        "  SELECT 'ADDRESS_INPUT','배송지 입력',90 FROM DUAL UNION ALL",
        "  SELECT 'CARD_PW_SET','카드 비밀번호',100 FROM DUAL UNION ALL",
        "  SELECT 'ISSUED','발급 완료',110 FROM DUAL UNION ALL",
        "  SELECT 'CANCELLED','취소',999 FROM DUAL",
        "),",
        "last_step AS (",
        "  SELECT",
        "    t.APPLICATION_NO, t.MEMBER_NO, t.CARD_NO, c.CARD_NAME,",
        "    d.step_code, d.step_name, d.step_order,",
        "    t.STATUS AS last_status,",
        "    t.CREATED_AT, t.UPDATED_AT",
        "  FROM CARD_APPLICATION_TEMP t",
        "  JOIN step_def d ON d.step_code = t.STATUS",
        "  JOIN CARD     c ON c.CARD_NO   = t.CARD_NO",
        "  WHERE 1=1",
        "    AND t.CARD_NO = #{cardNo}",
        "    AND d.step_code = #{fromStepCode}",
        "]]>",
        "<if test='fromDate != null'>",
        "  AND t.CREATED_AT &gt;= TRUNC(#{fromDate})",
        "</if>",
        "<if test='toDate != null'>",
        "  AND t.CREATED_AT &lt; TRUNC(#{toDate}) + 1",
        "</if>",
        "<if test='isCredit != null and isCredit != \"\"'>",
        "  AND t.IS_CREDIT_CARD = #{isCredit}",
        "</if>",
        "<![CDATA[",
        ")",
        "SELECT",
        "  l.APPLICATION_NO AS applicationNo,",
        "  l.MEMBER_NO      AS memberNo,",
        "  m.NAME           AS name,",
        "  m.USERNAME       AS username,",
        "  l.last_status    AS lastStatus,",
        "  l.CREATED_AT     AS createdAt,",
        "  l.UPDATED_AT     AS updatedAt",
        "FROM last_step l",
        "LEFT JOIN MEMBER m ON m.MEMBER_NO = l.MEMBER_NO",
        "ORDER BY l.UPDATED_AT DESC",
        "]]>",
        "</script>"
    })
    List<DropMemberRow> selectChurnMembersAtStep(
            @Param("cardNo") Long cardNo,
            @Param("fromStepCode") String fromStepCode,
            @Param("fromDate") Date fromDate,
            @Param("toDate") Date toDate,
            @Param("isCredit") String isCredit
    );

}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.busanbank.card.admin.dao.AdminReviewReportMapper">

  <!-- 1) KPI -->
  <select id="selectOverview" resultType="com.busanbank.card.admin.dto.OverviewKpi">
    <![CDATA[
      SELECT
        COUNT(*)                                              AS totalApplications,
        SUM(CASE WHEN STATUS = 'ISSUED'    THEN 1 ELSE 0 END) AS totalIssued,
        SUM(CASE WHEN STATUS = 'CANCELLED' THEN 1 ELSE 0 END) AS totalCancelled
      FROM CARD_APPLICATION
      WHERE CREATED_AT >= #{from, jdbcType=TIMESTAMP}
        AND CREATED_AT <  (#{to,   jdbcType=TIMESTAMP} + 1)
    ]]>
  </select>

  <!-- 2) 일자별 판매 추세 (발급 완료 기준) -->
  <select id="selectSalesTrend" resultType="com.busanbank.card.admin.dto.SalesTrendPoint">
    <![CDATA[
      SELECT
        TO_CHAR(TRUNC(CREATED_AT), 'YYYY-MM-DD') AS date,
        COUNT(*)                                  AS count
      FROM CARD_APPLICATION
      WHERE STATUS = 'ISSUED'
        AND CREATED_AT >= #{from, jdbcType=TIMESTAMP}
        AND CREATED_AT <  (#{to,   jdbcType=TIMESTAMP} + 1)
      GROUP BY TRUNC(CREATED_AT)
      ORDER BY TRUNC(CREATED_AT)
    ]]>
  </select>

  <!-- 3) 상품별 요약 (신청/승인/발급) + 상위 N개 -->
  <select id="selectSalesByProduct" resultType="com.busanbank.card.admin.dto.ProductSummary">
    <![CDATA[
      SELECT *
      FROM (
        SELECT
          ca.CARD_NO                                                   AS cardNo,
          NVL(c.CARD_NAME, '미상')                                     AS cardName,
          COUNT(*)                                                     AS applyCount,
          SUM(CASE WHEN ca.STATUS IN ('KYC_PASSED','ACCOUNT_CONFIRMED','OPTIONS_SET','ISSUED')
                   THEN 1 ELSE 0 END)                                  AS approvedCount,
          SUM(CASE WHEN ca.STATUS = 'ISSUED' THEN 1 ELSE 0 END)        AS issuedCount
        FROM CARD_APPLICATION ca
        LEFT JOIN CARD c ON c.CARD_NO = ca.CARD_NO
        WHERE ca.CREATED_AT >= #{from, jdbcType=TIMESTAMP}
          AND ca.CREATED_AT <  (#{to,   jdbcType=TIMESTAMP} + 1)
        GROUP BY ca.CARD_NO, c.CARD_NAME
        ORDER BY issuedCount DESC
      )
      WHERE ROWNUM <= #{top, jdbcType=INTEGER}
    ]]>
  </select>

  <!-- 4) 퍼널 요약 -->
  <select id="selectFunnel" resultType="com.busanbank.card.admin.dto.FunnelSummary">
    <![CDATA[
      SELECT
        SUM(CASE WHEN STATUS = 'DRAFT'             THEN 1 ELSE 0 END) AS draftCount,
        SUM(CASE WHEN STATUS = 'KYC_PASSED'        THEN 1 ELSE 0 END) AS kycPassedCount,
        SUM(CASE WHEN STATUS = 'ACCOUNT_CONFIRMED' THEN 1 ELSE 0 END) AS accountConfirmedCount,
        SUM(CASE WHEN STATUS = 'OPTIONS_SET'       THEN 1 ELSE 0 END) AS optionsSetCount,
        SUM(CASE WHEN STATUS = 'ISSUED'            THEN 1 ELSE 0 END) AS issuedCount
      FROM CARD_APPLICATION
      WHERE CREATED_AT >= #{from, jdbcType=TIMESTAMP}
        AND CREATED_AT <  (#{to,   jdbcType=TIMESTAMP} + 1)
    ]]>
  </select>

  <!-- 5) 상품별 인구통계(발급 완료 기준) : 성별/연령 -->
  <select id="selectProductDemographics" resultType="com.busanbank.card.admin.dto.ProductDemographic">
    <![CDATA[
      SELECT
        ca.CARD_NO                                           AS cardNo,
        NVL(c.CARD_NAME, '미상')                             AS cardName,
        /* 총 판매 */
        SUM(CASE WHEN ca.STATUS = 'ISSUED' THEN 1 ELSE 0 END)                                AS salesCount,
        /* 성별 (주민번호 성별코드: 1/3=남, 2/4=여 가정) */
        SUM(CASE WHEN ca.STATUS = 'ISSUED' AND m.RRN_GENDER IN ('1','3') THEN 1 ELSE 0 END)  AS maleCount,
        SUM(CASE WHEN ca.STATUS = 'ISSUED' AND m.RRN_GENDER IN ('2','4') THEN 1 ELSE 0 END)  AS femaleCount,
        /* 연령대: RRN_FRONT(YYMMDD) + RRN_GENDER(1,2=1900년대 / 3,4=2000년대)로 생년 계산 */
        SUM(CASE WHEN ca.STATUS = 'ISSUED'
                 AND m.RRN_FRONT IS NOT NULL
                 AND FLOOR(MONTHS_BETWEEN(
                       SYSDATE,
                       TO_DATE(
                         CASE
                           WHEN m.RRN_GENDER IN ('1','2') THEN '19' || m.RRN_FRONT
                           WHEN m.RRN_GENDER IN ('3','4') THEN '20' || m.RRN_FRONT
                           ELSE NULL
                         END, 'YYYYMMDD'
                       )
                 )/12) BETWEEN 10 AND 19 THEN 1 ELSE 0 END)                                   AS age10s,
        SUM(CASE WHEN ca.STATUS = 'ISSUED'
                 AND m.RRN_FRONT IS NOT NULL
                 AND FLOOR(MONTHS_BETWEEN(
                       SYSDATE,
                       TO_DATE(
                         CASE
                           WHEN m.RRN_GENDER IN ('1','2') THEN '19' || m.RRN_FRONT
                           WHEN m.RRN_GENDER IN ('3','4') THEN '20' || m.RRN_FRONT
                           ELSE NULL
                         END, 'YYYYMMDD'
                       )
                 )/12) BETWEEN 20 AND 29 THEN 1 ELSE 0 END)                                   AS age20s,
        SUM(CASE WHEN ca.STATUS = 'ISSUED'
                 AND m.RRN_FRONT IS NOT NULL
                 AND FLOOR(MONTHS_BETWEEN(
                       SYSDATE,
                       TO_DATE(
                         CASE
                           WHEN m.RRN_GENDER IN ('1','2') THEN '19' || m.RRN_FRONT
                           WHEN m.RRN_GENDER IN ('3','4') THEN '20' || m.RRN_FRONT
                           ELSE NULL
                         END, 'YYYYMMDD'
                       )
                 )/12) BETWEEN 30 AND 39 THEN 1 ELSE 0 END)                                   AS age30s,
        SUM(CASE WHEN ca.STATUS = 'ISSUED'
                 AND m.RRN_FRONT IS NOT NULL
                 AND FLOOR(MONTHS_BETWEEN(
                       SYSDATE,
                       TO_DATE(
                         CASE
                           WHEN m.RRN_GENDER IN ('1','2') THEN '19' || m.RRN_FRONT
                           WHEN m.RRN_GENDER IN ('3','4') THEN '20' || m.RRN_FRONT
                           ELSE NULL
                         END, 'YYYYMMDD'
                       )
                 )/12) BETWEEN 40 AND 49 THEN 1 ELSE 0 END)                                   AS age40s,
        SUM(CASE WHEN ca.STATUS = 'ISSUED'
                 AND m.RRN_FRONT IS NOT NULL
                 AND FLOOR(MONTHS_BETWEEN(
                       SYSDATE,
                       TO_DATE(
                         CASE
                           WHEN m.RRN_GENDER IN ('1','2') THEN '19' || m.RRN_FRONT
                           WHEN m.RRN_GENDER IN ('3','4') THEN '20' || m.RRN_FRONT
                           ELSE NULL
                         END, 'YYYYMMDD'
                       )
                 )/12) BETWEEN 50 AND 59 THEN 1 ELSE 0 END)                                   AS age50s,
        SUM(CASE WHEN ca.STATUS = 'ISSUED'
                 AND m.RRN_FRONT IS NOT NULL
                 AND FLOOR(MONTHS_BETWEEN(
                       SYSDATE,
                       TO_DATE(
                         CASE
                           WHEN m.RRN_GENDER IN ('1','2') THEN '19' || m.RRN_FRONT
                           WHEN m.RRN_GENDER IN ('3','4') THEN '20' || m.RRN_FRONT
                           ELSE NULL
                         END, 'YYYYMMDD'
                       )
                 )/12) >= 60 THEN 1 ELSE 0 END)                                               AS age60s
      FROM CARD_APPLICATION ca
      JOIN MEMBER m ON m.MEMBER_NO = ca.MEMBER_NO
      LEFT JOIN CARD c ON c.CARD_NO = ca.CARD_NO
      WHERE ca.CREATED_AT >= #{from, jdbcType=TIMESTAMP}
        AND ca.CREATED_AT <  (#{to,   jdbcType=TIMESTAMP} + 1)
      GROUP BY ca.CARD_NO, c.CARD_NAME
      ORDER BY cardName
    ]]>
  </select>

</mapper>
